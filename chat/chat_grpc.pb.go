// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChittyChatClient is the client API for ChittyChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyChatClient interface {
	PublishMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageAck, error)
	JoinChat(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (ChittyChat_JoinChatClient, error)
	LeaveChat(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (ChittyChat_LeaveChatClient, error)
}

type chittyChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyChatClient(cc grpc.ClientConnInterface) ChittyChatClient {
	return &chittyChatClient{cc}
}

func (c *chittyChatClient) PublishMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageAck, error) {
	out := new(MessageAck)
	err := c.cc.Invoke(ctx, "/chat.ChittyChat/publishMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyChatClient) JoinChat(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (ChittyChat_JoinChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChat_ServiceDesc.Streams[0], "/chat.ChittyChat/joinChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatJoinChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChat_JoinChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chittyChatJoinChatClient struct {
	grpc.ClientStream
}

func (x *chittyChatJoinChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chittyChatClient) LeaveChat(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (ChittyChat_LeaveChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChat_ServiceDesc.Streams[1], "/chat.ChittyChat/leaveChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatLeaveChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChat_LeaveChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chittyChatLeaveChatClient struct {
	grpc.ClientStream
}

func (x *chittyChatLeaveChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChittyChatServer is the server API for ChittyChat service.
// All implementations must embed UnimplementedChittyChatServer
// for forward compatibility
type ChittyChatServer interface {
	PublishMessage(context.Context, *Message) (*MessageAck, error)
	JoinChat(*JoinRequest, ChittyChat_JoinChatServer) error
	LeaveChat(*LeaveRequest, ChittyChat_LeaveChatServer) error
	mustEmbedUnimplementedChittyChatServer()
}

// UnimplementedChittyChatServer must be embedded to have forward compatible implementations.
type UnimplementedChittyChatServer struct {
}

func (UnimplementedChittyChatServer) PublishMessage(context.Context, *Message) (*MessageAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedChittyChatServer) JoinChat(*JoinRequest, ChittyChat_JoinChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChittyChatServer) LeaveChat(*LeaveRequest, ChittyChat_LeaveChatServer) error {
	return status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedChittyChatServer) mustEmbedUnimplementedChittyChatServer() {}

// UnsafeChittyChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyChatServer will
// result in compilation errors.
type UnsafeChittyChatServer interface {
	mustEmbedUnimplementedChittyChatServer()
}

func RegisterChittyChatServer(s grpc.ServiceRegistrar, srv ChittyChatServer) {
	s.RegisterService(&ChittyChat_ServiceDesc, srv)
}

func _ChittyChat_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChittyChat/publishMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServer).PublishMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyChat_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServer).JoinChat(m, &chittyChatJoinChatServer{stream})
}

type ChittyChat_JoinChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chittyChatJoinChatServer struct {
	grpc.ServerStream
}

func (x *chittyChatJoinChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChittyChat_LeaveChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeaveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServer).LeaveChat(m, &chittyChatLeaveChatServer{stream})
}

type ChittyChat_LeaveChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chittyChatLeaveChatServer struct {
	grpc.ServerStream
}

func (x *chittyChatLeaveChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// ChittyChat_ServiceDesc is the grpc.ServiceDesc for ChittyChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChittyChat",
	HandlerType: (*ChittyChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishMessage",
			Handler:    _ChittyChat_PublishMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "joinChat",
			Handler:       _ChittyChat_JoinChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "leaveChat",
			Handler:       _ChittyChat_LeaveChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
